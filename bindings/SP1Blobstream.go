// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BinaryMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type BinaryMerkleProof struct {
	SideNodes [][32]byte
	Key       *big.Int
	NumLeaves *big.Int
}

// DataRootTuple is an auto generated low-level Go binding around an user-defined struct.
type DataRootTuple struct {
	Height   *big.Int
	DataRoot [32]byte
}

// SP1BlobstreamInitParameters is an auto generated low-level Go binding around an user-defined struct.
type SP1BlobstreamInitParameters struct {
	Guardian              common.Address
	Height                uint64
	Header                [32]byte
	BlobstreamProgramVkey [32]byte
	Verifier              common.Address
}

// BindingsMetaData contains all meta data concerning the Bindings contract.
var BindingsMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"DATA_COMMITMENT_MAX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"GUARDIAN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"TIMELOCK_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"VERSION\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"approvedRelayers\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"blobstreamProgramVkey\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"blockHeightToHeaderHash\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkRelayer\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"commitHeaderRange\",\"inputs\":[{\"name\":\"proof\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"publicValues\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"frozen\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"gateway_deprecated\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"headerRangeFunctionId_deprecated\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_params\",\"type\":\"tuple\",\"internalType\":\"structSP1Blobstream.InitParameters\",\"components\":[{\"name\":\"guardian\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"height\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"header\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"blobstreamProgramVkey\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"verifier\",\"type\":\"address\",\"internalType\":\"address\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"latestBlock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nextHeaderFunctionId_depcrecated\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"proxiableUUID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setCheckRelayer\",\"inputs\":[{\"name\":\"_checkRelayer\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setRelayerApproval\",\"inputs\":[{\"name\":\"_relayer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"state_dataCommitments\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"state_proofNonce\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"updateFreeze\",\"inputs\":[{\"name\":\"_freeze\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateGenesisState\",\"inputs\":[{\"name\":\"_height\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"_header\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateProgramVkey\",\"inputs\":[{\"name\":\"_programVkey\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateVerifier\",\"inputs\":[{\"name\":\"_verifier\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"upgradeTo\",\"inputs\":[{\"name\":\"newImplementation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"upgradeToAndCall\",\"inputs\":[{\"name\":\"newImplementation\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"verifier\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractISP1Verifier\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"verifyAttestation\",\"inputs\":[{\"name\":\"_proofNonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_tuple\",\"type\":\"tuple\",\"internalType\":\"structDataRootTuple\",\"components\":[{\"name\":\"height\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"dataRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"_proof\",\"type\":\"tuple\",\"internalType\":\"structBinaryMerkleProof\",\"components\":[{\"name\":\"sideNodes\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"},{\"name\":\"key\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numLeaves\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AdminChanged\",\"inputs\":[{\"name\":\"previousAdmin\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"newAdmin\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BeaconUpgraded\",\"inputs\":[{\"name\":\"beacon\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DataCommitmentStored\",\"inputs\":[{\"name\":\"proofNonce\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"startBlock\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"endBlock\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"dataCommitment\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"HeadUpdate\",\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"headerHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Upgraded\",\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorBitmapEquivocation\",\"inputs\":[{\"name\":\"trustedBlock\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"targetBlock\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"validatorBitmap\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ContractFrozen\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyGuardian\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OnlyTimelock\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"RelayerNotApproved\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TargetBlockNotInRange\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TrustedHeaderMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TrustedHeaderNotFound\",\"inputs\":[]}]",
	Bin: "0x60a060405230608052610105805460ff1916905534801561001f57600080fd5b5061002861002d565b6100ec565b600054610100900460ff16156100995760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100ea576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161291d6101236000396000818161089a015281816108da015281816109ed01528181610a2d0152610abc015261291d6000f3fe6080604052600436106102045760003560e01c806355ae3f221161011857806397fc007c116100a0578063c87053cc1161006f578063c87053cc1461060b578063d547741f14610626578063f288a2e214610646578063f62ac70f1461067a578063ffa1ad741461069a57600080fd5b806397fc007c14610593578063a217fddf146105b3578063aeeed33e146105c8578063b14ba993146105f557600080fd5b806382e0cf6b116100e757806382e0cf6b146104eb5780638455a3cf1461050b5780638cba8b6a1461052b5780638daf56911461055c57806391d148541461057357600080fd5b806355ae3f22146104755780635f4170a41461048b5780635f63e69c146104ab57806371cdd140146104cb57600080fd5b80632b7ac3f31161019b5780633659cfe61161016a5780633659cfe6146103f75780634710384e146104175780634c4d30fc1461042d5780634f1ef2861461044d57806352d1902d1461046057600080fd5b80632b7ac3f3146103675780632cce363d146103a05780632f2ff15d146103b757806336568abe146103d757600080fd5b80631f3302a9116101d75780631f3302a9146102d357806320986ce6146102f3578063248a9ca31461031557806324ea54f41461034557600080fd5b806301ffc9a714610209578063054f7d9c1461023e57806307e2da961461025957806308e93ea514610298575b600080fd5b34801561021557600080fd5b5061022961022436600461200d565b6106ce565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b50610101546102299060ff1681565b34801561026557600080fd5b5060fb5461028090600160a01b90046001600160401b031681565b6040516001600160401b039091168152602001610235565b3480156102a457600080fd5b506102c56102b3366004612053565b60fd6020526000908152604090205481565b604051908152602001610235565b3480156102df57600080fd5b506102296102ee3660046120fe565b610705565b3480156102ff57600080fd5b5061031361030e366004612244565b610798565b005b34801561032157600080fd5b506102c561033036600461225f565b600090815260c9602052604090206001015490565b34801561035157600080fd5b506102c56000805160206128c883398151915281565b34801561037357600080fd5b5061010354610388906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b3480156103ac57600080fd5b506102c56101025481565b3480156103c357600080fd5b506103136103d236600461228f565b6107e8565b3480156103e357600080fd5b506103136103f236600461228f565b610812565b34801561040357600080fd5b506103136104123660046122bb565b610890565b34801561042357600080fd5b506102806103e881565b34801561043957600080fd5b506103136104483660046122d6565b61096f565b61031361045b36600461230b565b6109e3565b34801561046c57600080fd5b506102c5610aaf565b34801561048157600080fd5b506102c560fc5481565b34801561049757600080fd5b506103136104a63660046123b4565b610b62565b3480156104b757600080fd5b5060fb54610388906001600160a01b031681565b3480156104d757600080fd5b506103136104e636600461225f565b610d54565b3480156104f757600080fd5b50610313610506366004612244565b610d91565b34801561051757600080fd5b50610313610526366004612417565b610ddc565b34801561053757600080fd5b506102296105463660046122bb565b6101046020526000908152604090205460ff1681565b34801561056857600080fd5b506102c56101005481565b34801561057f57600080fd5b5061022961058e36600461228f565b611129565b34801561059f57600080fd5b506103136105ae3660046122bb565b611154565b3480156105bf57600080fd5b506102c5600081565b3480156105d457600080fd5b506102c56105e336600461225f565b60fe6020526000908152604090205481565b34801561060157600080fd5b506102c560ff5481565b34801561061757600080fd5b50610105546102299060ff1681565b34801561063257600080fd5b5061031361064136600461228f565b6111ae565b34801561065257600080fd5b506102c57ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0581565b34801561068657600080fd5b50610313610695366004612486565b6111d3565b3480156106a657600080fd5b5060408051808201825260058152640312e312e360dc1b6020820152905161023591906124d4565b60006001600160e01b03198216637965db0b60e01b14806106ff57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6101015460009060ff161561072d57604051634051e96160e01b815260040160405180910390fd5b83158061073c575060fc548410155b1561074957506000610791565b600084815260fe6020908152604080832054815187518185015292870151838301528151808403830181526060909301909152919061078b9083908690611236565b50925050505b9392505050565b6107b06000805160206128c883398151915233611129565b6107d45760405163ea79172d60e01b81523360048201526024015b60405180910390fd5b610105805460ff1916911515919091179055565b600082815260c9602052604090206001015461080381611337565b61080d8383611341565b505050565b6001600160a01b03811633146108825760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107cb565b61088c82826113c7565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108d85760405162461bcd60e51b81526004016107cb90612507565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610921600080516020612881833981519152546001600160a01b031690565b6001600160a01b0316146109475760405162461bcd60e51b81526004016107cb90612553565b6109508161142e565b6040805160008082526020820190925261096c91839190611477565b50565b6109876000805160206128c883398151915233611129565b6109a65760405163ea79172d60e01b81523360048201526024016107cb565b63ffffffff91909116600081815260fd602052604090209190915560fb805467ffffffffffffffff60a01b1916600160a01b909202919091179055565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a2b5760405162461bcd60e51b81526004016107cb90612507565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a74600080516020612881833981519152546001600160a01b031690565b6001600160a01b031614610a9a5760405162461bcd60e51b81526004016107cb90612553565b610aa38261142e565b61088c82826001611477565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b4f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107cb565b5060008051602061288183398151915290565b600054610100900460ff1615808015610b825750600054600160ff909116105b80610b9c5750303b158015610b9c575060005460ff166001145b610bff5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107cb565b6000805460ff191660011790558015610c22576000805461ff0019166101001790555b610c44610c3260208401846122bb565b610c3f60208501856122bb565b6115e2565b610101805460ff191690556040820180359060fd90600090610c699060208701612053565b6001600160401b03166001600160401b0316815260200190815260200160002081905550816020016020810190610ca09190612053565b60fb80546001600160401b0392909216600160a01b0267ffffffffffffffff60a01b19909216919091179055606082013561010255610ce560a08301608084016122bb565b61010380546001600160a01b0319166001600160a01b0392909216919091179055600160fc55801561088c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610d6c6000805160206128c883398151915233611129565b610d8b5760405163ea79172d60e01b81523360048201526024016107cb565b61010255565b610da96000805160206128c883398151915233611129565b610dc85760405163ea79172d60e01b81523360048201526024016107cb565b610101805460ff1916911515919091179055565b6101055460ff168015610e005750336000908152610104602052604090205460ff16155b15610e1e576040516333eb1cdb60e01b815260040160405180910390fd5b6101015460ff1615610e4357604051634051e96160e01b815260040160405180910390fd5b6000610e518284018461259f565b60fb54600160a01b90046001600160401b0316600090815260fd602052604090205490915080610e9457604051630f49c3c160e21b815260040160405180910390fd5b81518114610eb557604051635efdb0ef60e01b815260040160405180910390fd5b60fb5460808301516001600160401b03600160a01b90920482169116111580610f0b575060fb5460808301516103e891610f0091600160a01b9091046001600160401b031690612640565b6001600160401b0316115b15610f295760405163f277783560e01b815260040160405180910390fd5b610103546101025460405163020a49e360e51b81526001600160a01b03909216916341493c6091610f6491889088908c908c90600401612688565b60006040518083038186803b158015610f7c57600080fd5b505afa158015610f90573d6000803e3d6000fd5b5050506080830151602080850151604080516001600160401b039094168452918301527f292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d92500160405180910390a1816040015182608001516001600160401b031660fb60149054906101000a90046001600160401b03166001600160401b03167f34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb60fc5460405161104491815260200190565b60405180910390a4606080830151608084015160a0850151604080516001600160401b039485168152939092166020840152908201527f034c7608fd99db72330fdb1bcf6386af42ee9b6125664743942b942a8df4a351910160405180910390a160208083015160808401516001600160401b0316600090815260fd83526040808220929092558185015160fc8054835260fe90945291812091909155815491906110ee836126c1565b9091555050506080015160fb80546001600160401b03909216600160a01b0267ffffffffffffffff60a01b1990921691909117905550505050565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61116c6000805160206128c883398151915233611129565b61118b5760405163ea79172d60e01b81523360048201526024016107cb565b61010380546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260c960205260409020600101546111c981611337565b61080d83836113c7565b6111eb6000805160206128c883398151915233611129565b61120a5760405163ea79172d60e01b81523360048201526024016107cb565b6001600160a01b0391909116600090815261010460205260409020805460ff1916911515919091179055565b600080600184604001511161125e5783515115611259575060009050600161132f565b611284565b61127084602001518560400151611666565b84515114611284575060009050600161132f565b836040015184602001511061129f575060009050600261132f565b60006112aa846116fc565b8551519091506000036112dd5784604001516001036112d057851491506000905061132f565b600080925092505061132f565b6000806112f887602001518860400151858a60000151611771565b90925090506000816005811115611311576113116126da565b146113245760009450925061132f915050565b508614925060009150505b935093915050565b61096c81336118fb565b61134b8282611129565b61088c57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113833390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6113d18282611129565b1561088c57600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6114587ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0533611129565b61096c57604051636744392960e11b81523360048201526024016107cb565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156114aa5761080d83611954565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611504575060408051601f3d908101601f19168201909252611501918101906126f0565b60015b6115675760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016107cb565b60008051602061288183398151915281146115d65760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016107cb565b5061080d8383836119f0565b600054610100900460ff166116095760405162461bcd60e51b81526004016107cb90612709565b611611611a1b565b611619611a1b565b611624600083611341565b61164e7ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0583611341565b61088c6000805160206128c883398151915282611341565b600060018211611678575060006106ff565b61168182611a44565b61168d90610100612754565b9050600061169c600183612754565b6001901b90506001816116af9190612754565b84116116bb57506106ff565b806001036116cd5760019150506106ff565b6116e96116da8286612754565b6116e48386612754565b611666565b6116f4906001612767565b9150506106ff565b60006002600060f81b8360405160200161171792919061277a565b60408051601f1981840301815290829052611731916127ab565b602060405180830381855afa15801561174e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106ff91906126f0565b60008084600003611787575082905060036118f2565b846001036117ac578251156117a1575082905060046118f2565b5082905060006118f2565b82516000036117c0575082905060056118f2565b60006117cb86611a71565b905060006117e8856000600188516117e39190612754565b611ab2565b905060008289101561186c5760006118028a858a86611771565b92509050600082600581111561181a5761181a6126da565b1461182d575086945092506118f2915050565b61185d818860018a516118409190612754565b81518110611850576118506127c7565b6020026020010151611c37565b600095509550505050506118f2565b600061188c61187b858c612754565b611885868c612754565b8a86611771565b9250905060008260058111156118a4576118a46126da565b146118b7575086945092506118f2915050565b6118e787600189516118c99190612754565b815181106118d9576118d96127c7565b602002602001015182611c37565b600095509550505050505b94509492505050565b6119058282611129565b61088c5761191281611cb5565b61191d836020611cc7565b60405160200161192e9291906127dd565b60408051601f198184030181529082905262461bcd60e51b82526107cb916004016124d4565b6001600160a01b0381163b6119c15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107cb565b60008051602061288183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6119f983611e62565b600082511180611a065750805b1561080d57611a158383611ea2565b50505050565b600054610100900460ff16611a425760405162461bcd60e51b81526004016107cb90612709565b565b60005b81816001901b1015611a6557611a5e600182612767565b9050611a47565b6106ff81610100612754565b60006001821015611a8157600080fd5b6000611a8c83611ec7565b90506000611a9b600183612754565b6001901b90508381036107915760011c9392505050565b606081831115611b175760405162461bcd60e51b815260206004820152602a60248201527f496e76616c69642072616e67653a205f626567696e2069732067726561746572604482015269081d1a185b8817d95b9960b21b60648201526084016107cb565b8351831180611b265750835182115b15611b8b5760405162461bcd60e51b815260206004820152602f60248201527f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260448201526e65206f7574206f6620626f756e647360881b60648201526084016107cb565b6000611b978484612754565b6001600160401b03811115611bae57611bae61206e565b604051908082528060200260200182016040528015611bd7578160200160208202803683370190505b509050835b83811015611c2e57858181518110611bf657611bf66127c7565b6020026020010151828683611c0b9190612754565b81518110611c1b57611c1b6127c7565b6020908102919091010152600101611bdc565b50949350505050565b604051600160f81b6020820152602181018390526041810182905260009060029060610160408051601f1981840301815290829052611c75916127ab565b602060405180830381855afa158015611c92573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061079191906126f0565b60606106ff6001600160a01b03831660145b60606000611cd6836002612852565b611ce1906002612767565b6001600160401b03811115611cf857611cf861206e565b6040519080825280601f01601f191660200182016040528015611d22576020820181803683370190505b509050600360fc1b81600081518110611d3d57611d3d6127c7565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d6c57611d6c6127c7565b60200101906001600160f81b031916908160001a9053506000611d90846002612852565b611d9b906001612767565b90505b6001811115611e13576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611dcf57611dcf6127c7565b1a60f81b828281518110611de557611de56127c7565b60200101906001600160f81b031916908160001a90535060049490941c93611e0c81612869565b9050611d9e565b5083156107915760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107cb565b611e6b81611954565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061079183836040518060600160405280602781526020016128a160279139611eea565b6000805b82156106ff5780611edb816126c1565b915050600183901c9250611ecb565b6060600080856001600160a01b031685604051611f0791906127ab565b600060405180830381855af49150503d8060008114611f42576040519150601f19603f3d011682016040523d82523d6000602084013e611f47565b606091505b5091509150611f5886838387611f62565b9695505050505050565b60608315611fd1578251600003611fca576001600160a01b0385163b611fca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107cb565b5081611fdb565b611fdb8383611fe3565b949350505050565b815115611ff35781518083602001fd5b8060405162461bcd60e51b81526004016107cb91906124d4565b60006020828403121561201f57600080fd5b81356001600160e01b03198116811461079157600080fd5b80356001600160401b038116811461204e57600080fd5b919050565b60006020828403121561206557600080fd5b61079182612037565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156120a6576120a661206e565b60405290565b604051606081016001600160401b03811182821017156120a6576120a661206e565b604051601f8201601f191681016001600160401b03811182821017156120f6576120f661206e565b604052919050565b6000806000838503608081121561211457600080fd5b843593506040601f198201121561212a57600080fd5b50612133612084565b6020858101358252604086013590820152915060608401356001600160401b0381111561215f57600080fd5b84016060818703121561217157600080fd5b6121796120ac565b81356001600160401b0381111561218f57600080fd5b8201601f810188136121a057600080fd5b80356001600160401b038111156121b9576121b961206e565b8060051b6121c9602082016120ce565b9182526020818401810192908101908b8411156121e557600080fd5b6020850194505b8385101561220b578435808352602095860195909350909101906121ec565b855250505050602082810135908201526040918201359181019190915292959194509192509050565b8035801515811461204e57600080fd5b60006020828403121561225657600080fd5b61079182612234565b60006020828403121561227157600080fd5b5035919050565b80356001600160a01b038116811461204e57600080fd5b600080604083850312156122a257600080fd5b823591506122b260208401612278565b90509250929050565b6000602082840312156122cd57600080fd5b61079182612278565b600080604083850312156122e957600080fd5b823563ffffffff811681146122fd57600080fd5b946020939093013593505050565b6000806040838503121561231e57600080fd5b61232783612278565b915060208301356001600160401b0381111561234257600080fd5b8301601f8101851361235357600080fd5b80356001600160401b0381111561236c5761236c61206e565b61237f601f8201601f19166020016120ce565b81815286602083850101111561239457600080fd5b816020840160208301376000602083830101528093505050509250929050565b600060a08284031280156123c757600080fd5b509092915050565b60008083601f8401126123e157600080fd5b5081356001600160401b038111156123f857600080fd5b60208301915083602082850101111561241057600080fd5b9250929050565b6000806000806040858703121561242d57600080fd5b84356001600160401b0381111561244357600080fd5b61244f878288016123cf565b90955093505060208501356001600160401b0381111561246e57600080fd5b61247a878288016123cf565b95989497509550505050565b6000806040838503121561249957600080fd5b6124a283612278565b91506122b260208401612234565b60005b838110156124cb5781810151838201526020016124b3565b50506000910152565b60208152600082518060208401526124f38160408501602087016124b0565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060c08284031280156125b257600080fd5b5060405160009060c081016001600160401b03811182821017156125d8576125d861206e565b6040908152843582526020808601359083015284810135908201526125ff60608501612037565b606082015261261060808501612037565b608082015260a09384013593810193909352509092915050565b634e487b7160e01b600052601160045260246000fd5b6001600160401b0382811682821603908111156106ff576106ff61262a565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8581526060602082015260006126a260608301868861265f565b82810360408401526126b581858761265f565b98975050505050505050565b6000600182016126d3576126d361262a565b5060010190565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561270257600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b818103818111156106ff576106ff61262a565b808201808211156106ff576106ff61262a565b6001600160f81b031983168152815160009061279d8160018501602087016124b0565b919091016001019392505050565b600082516127bd8184602087016124b0565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516128158160178501602088016124b0565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128468160288401602088016124b0565b01602801949350505050565b80820281158282048414176106ff576106ff61262a565b6000816128785761287861262a565b50600019019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656455435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041a26469706673582212209fde961f9a7da8d359a9ac5f4223bbb63243b880eb7e1cd40a4c218f76de150c64736f6c634300081a0033",
}

// BindingsABI is the input ABI used to generate the binding from.
// Deprecated: Use BindingsMetaData.ABI instead.
var BindingsABI = BindingsMetaData.ABI

// BindingsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BindingsMetaData.Bin instead.
var BindingsBin = BindingsMetaData.Bin

// DeployBindings deploys a new Ethereum contract, binding an instance of Bindings to it.
func DeployBindings(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bindings, error) {
	parsed, err := BindingsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BindingsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bindings{BindingsCaller: BindingsCaller{contract: contract}, BindingsTransactor: BindingsTransactor{contract: contract}, BindingsFilterer: BindingsFilterer{contract: contract}}, nil
}

// Bindings is an auto generated Go binding around an Ethereum contract.
type Bindings struct {
	BindingsCaller     // Read-only binding to the contract
	BindingsTransactor // Write-only binding to the contract
	BindingsFilterer   // Log filterer for contract events
}

// BindingsCaller is an auto generated read-only Go binding around an Ethereum contract.
type BindingsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BindingsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BindingsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BindingsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BindingsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BindingsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BindingsSession struct {
	Contract     *Bindings         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BindingsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BindingsCallerSession struct {
	Contract *BindingsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// BindingsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BindingsTransactorSession struct {
	Contract     *BindingsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BindingsRaw is an auto generated low-level Go binding around an Ethereum contract.
type BindingsRaw struct {
	Contract *Bindings // Generic contract binding to access the raw methods on
}

// BindingsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BindingsCallerRaw struct {
	Contract *BindingsCaller // Generic read-only contract binding to access the raw methods on
}

// BindingsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BindingsTransactorRaw struct {
	Contract *BindingsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBindings creates a new instance of Bindings, bound to a specific deployed contract.
func NewBindings(address common.Address, backend bind.ContractBackend) (*Bindings, error) {
	contract, err := bindBindings(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bindings{BindingsCaller: BindingsCaller{contract: contract}, BindingsTransactor: BindingsTransactor{contract: contract}, BindingsFilterer: BindingsFilterer{contract: contract}}, nil
}

// NewBindingsCaller creates a new read-only instance of Bindings, bound to a specific deployed contract.
func NewBindingsCaller(address common.Address, caller bind.ContractCaller) (*BindingsCaller, error) {
	contract, err := bindBindings(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BindingsCaller{contract: contract}, nil
}

// NewBindingsTransactor creates a new write-only instance of Bindings, bound to a specific deployed contract.
func NewBindingsTransactor(address common.Address, transactor bind.ContractTransactor) (*BindingsTransactor, error) {
	contract, err := bindBindings(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BindingsTransactor{contract: contract}, nil
}

// NewBindingsFilterer creates a new log filterer instance of Bindings, bound to a specific deployed contract.
func NewBindingsFilterer(address common.Address, filterer bind.ContractFilterer) (*BindingsFilterer, error) {
	contract, err := bindBindings(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BindingsFilterer{contract: contract}, nil
}

// bindBindings binds a generic wrapper to an already deployed contract.
func bindBindings(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BindingsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bindings *BindingsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bindings.Contract.BindingsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bindings *BindingsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bindings.Contract.BindingsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bindings *BindingsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bindings.Contract.BindingsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bindings *BindingsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bindings.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bindings *BindingsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bindings.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bindings *BindingsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bindings.Contract.contract.Transact(opts, method, params...)
}

// DATACOMMITMENTMAX is a free data retrieval call binding the contract method 0x4710384e.
//
// Solidity: function DATA_COMMITMENT_MAX() view returns(uint64)
func (_Bindings *BindingsCaller) DATACOMMITMENTMAX(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "DATA_COMMITMENT_MAX")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// DATACOMMITMENTMAX is a free data retrieval call binding the contract method 0x4710384e.
//
// Solidity: function DATA_COMMITMENT_MAX() view returns(uint64)
func (_Bindings *BindingsSession) DATACOMMITMENTMAX() (uint64, error) {
	return _Bindings.Contract.DATACOMMITMENTMAX(&_Bindings.CallOpts)
}

// DATACOMMITMENTMAX is a free data retrieval call binding the contract method 0x4710384e.
//
// Solidity: function DATA_COMMITMENT_MAX() view returns(uint64)
func (_Bindings *BindingsCallerSession) DATACOMMITMENTMAX() (uint64, error) {
	return _Bindings.Contract.DATACOMMITMENTMAX(&_Bindings.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bindings *BindingsCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bindings *BindingsSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bindings.Contract.DEFAULTADMINROLE(&_Bindings.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bindings *BindingsCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bindings.Contract.DEFAULTADMINROLE(&_Bindings.CallOpts)
}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_Bindings *BindingsCaller) GUARDIANROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "GUARDIAN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_Bindings *BindingsSession) GUARDIANROLE() ([32]byte, error) {
	return _Bindings.Contract.GUARDIANROLE(&_Bindings.CallOpts)
}

// GUARDIANROLE is a free data retrieval call binding the contract method 0x24ea54f4.
//
// Solidity: function GUARDIAN_ROLE() view returns(bytes32)
func (_Bindings *BindingsCallerSession) GUARDIANROLE() ([32]byte, error) {
	return _Bindings.Contract.GUARDIANROLE(&_Bindings.CallOpts)
}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_Bindings *BindingsCaller) TIMELOCKROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "TIMELOCK_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_Bindings *BindingsSession) TIMELOCKROLE() ([32]byte, error) {
	return _Bindings.Contract.TIMELOCKROLE(&_Bindings.CallOpts)
}

// TIMELOCKROLE is a free data retrieval call binding the contract method 0xf288a2e2.
//
// Solidity: function TIMELOCK_ROLE() view returns(bytes32)
func (_Bindings *BindingsCallerSession) TIMELOCKROLE() ([32]byte, error) {
	return _Bindings.Contract.TIMELOCKROLE(&_Bindings.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_Bindings *BindingsCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_Bindings *BindingsSession) VERSION() (string, error) {
	return _Bindings.Contract.VERSION(&_Bindings.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(string)
func (_Bindings *BindingsCallerSession) VERSION() (string, error) {
	return _Bindings.Contract.VERSION(&_Bindings.CallOpts)
}

// ApprovedRelayers is a free data retrieval call binding the contract method 0x8cba8b6a.
//
// Solidity: function approvedRelayers(address ) view returns(bool)
func (_Bindings *BindingsCaller) ApprovedRelayers(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "approvedRelayers", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ApprovedRelayers is a free data retrieval call binding the contract method 0x8cba8b6a.
//
// Solidity: function approvedRelayers(address ) view returns(bool)
func (_Bindings *BindingsSession) ApprovedRelayers(arg0 common.Address) (bool, error) {
	return _Bindings.Contract.ApprovedRelayers(&_Bindings.CallOpts, arg0)
}

// ApprovedRelayers is a free data retrieval call binding the contract method 0x8cba8b6a.
//
// Solidity: function approvedRelayers(address ) view returns(bool)
func (_Bindings *BindingsCallerSession) ApprovedRelayers(arg0 common.Address) (bool, error) {
	return _Bindings.Contract.ApprovedRelayers(&_Bindings.CallOpts, arg0)
}

// BlobstreamProgramVkey is a free data retrieval call binding the contract method 0x2cce363d.
//
// Solidity: function blobstreamProgramVkey() view returns(bytes32)
func (_Bindings *BindingsCaller) BlobstreamProgramVkey(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "blobstreamProgramVkey")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BlobstreamProgramVkey is a free data retrieval call binding the contract method 0x2cce363d.
//
// Solidity: function blobstreamProgramVkey() view returns(bytes32)
func (_Bindings *BindingsSession) BlobstreamProgramVkey() ([32]byte, error) {
	return _Bindings.Contract.BlobstreamProgramVkey(&_Bindings.CallOpts)
}

// BlobstreamProgramVkey is a free data retrieval call binding the contract method 0x2cce363d.
//
// Solidity: function blobstreamProgramVkey() view returns(bytes32)
func (_Bindings *BindingsCallerSession) BlobstreamProgramVkey() ([32]byte, error) {
	return _Bindings.Contract.BlobstreamProgramVkey(&_Bindings.CallOpts)
}

// BlockHeightToHeaderHash is a free data retrieval call binding the contract method 0x08e93ea5.
//
// Solidity: function blockHeightToHeaderHash(uint64 ) view returns(bytes32)
func (_Bindings *BindingsCaller) BlockHeightToHeaderHash(opts *bind.CallOpts, arg0 uint64) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "blockHeightToHeaderHash", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BlockHeightToHeaderHash is a free data retrieval call binding the contract method 0x08e93ea5.
//
// Solidity: function blockHeightToHeaderHash(uint64 ) view returns(bytes32)
func (_Bindings *BindingsSession) BlockHeightToHeaderHash(arg0 uint64) ([32]byte, error) {
	return _Bindings.Contract.BlockHeightToHeaderHash(&_Bindings.CallOpts, arg0)
}

// BlockHeightToHeaderHash is a free data retrieval call binding the contract method 0x08e93ea5.
//
// Solidity: function blockHeightToHeaderHash(uint64 ) view returns(bytes32)
func (_Bindings *BindingsCallerSession) BlockHeightToHeaderHash(arg0 uint64) ([32]byte, error) {
	return _Bindings.Contract.BlockHeightToHeaderHash(&_Bindings.CallOpts, arg0)
}

// CheckRelayer is a free data retrieval call binding the contract method 0xc87053cc.
//
// Solidity: function checkRelayer() view returns(bool)
func (_Bindings *BindingsCaller) CheckRelayer(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "checkRelayer")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckRelayer is a free data retrieval call binding the contract method 0xc87053cc.
//
// Solidity: function checkRelayer() view returns(bool)
func (_Bindings *BindingsSession) CheckRelayer() (bool, error) {
	return _Bindings.Contract.CheckRelayer(&_Bindings.CallOpts)
}

// CheckRelayer is a free data retrieval call binding the contract method 0xc87053cc.
//
// Solidity: function checkRelayer() view returns(bool)
func (_Bindings *BindingsCallerSession) CheckRelayer() (bool, error) {
	return _Bindings.Contract.CheckRelayer(&_Bindings.CallOpts)
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() view returns(bool)
func (_Bindings *BindingsCaller) Frozen(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "frozen")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() view returns(bool)
func (_Bindings *BindingsSession) Frozen() (bool, error) {
	return _Bindings.Contract.Frozen(&_Bindings.CallOpts)
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() view returns(bool)
func (_Bindings *BindingsCallerSession) Frozen() (bool, error) {
	return _Bindings.Contract.Frozen(&_Bindings.CallOpts)
}

// GatewayDeprecated is a free data retrieval call binding the contract method 0x5f63e69c.
//
// Solidity: function gateway_deprecated() view returns(address)
func (_Bindings *BindingsCaller) GatewayDeprecated(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "gateway_deprecated")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GatewayDeprecated is a free data retrieval call binding the contract method 0x5f63e69c.
//
// Solidity: function gateway_deprecated() view returns(address)
func (_Bindings *BindingsSession) GatewayDeprecated() (common.Address, error) {
	return _Bindings.Contract.GatewayDeprecated(&_Bindings.CallOpts)
}

// GatewayDeprecated is a free data retrieval call binding the contract method 0x5f63e69c.
//
// Solidity: function gateway_deprecated() view returns(address)
func (_Bindings *BindingsCallerSession) GatewayDeprecated() (common.Address, error) {
	return _Bindings.Contract.GatewayDeprecated(&_Bindings.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bindings *BindingsCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bindings *BindingsSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bindings.Contract.GetRoleAdmin(&_Bindings.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bindings *BindingsCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bindings.Contract.GetRoleAdmin(&_Bindings.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bindings *BindingsCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bindings *BindingsSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bindings.Contract.HasRole(&_Bindings.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bindings *BindingsCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bindings.Contract.HasRole(&_Bindings.CallOpts, role, account)
}

// HeaderRangeFunctionIdDeprecated is a free data retrieval call binding the contract method 0xb14ba993.
//
// Solidity: function headerRangeFunctionId_deprecated() view returns(bytes32)
func (_Bindings *BindingsCaller) HeaderRangeFunctionIdDeprecated(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "headerRangeFunctionId_deprecated")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HeaderRangeFunctionIdDeprecated is a free data retrieval call binding the contract method 0xb14ba993.
//
// Solidity: function headerRangeFunctionId_deprecated() view returns(bytes32)
func (_Bindings *BindingsSession) HeaderRangeFunctionIdDeprecated() ([32]byte, error) {
	return _Bindings.Contract.HeaderRangeFunctionIdDeprecated(&_Bindings.CallOpts)
}

// HeaderRangeFunctionIdDeprecated is a free data retrieval call binding the contract method 0xb14ba993.
//
// Solidity: function headerRangeFunctionId_deprecated() view returns(bytes32)
func (_Bindings *BindingsCallerSession) HeaderRangeFunctionIdDeprecated() ([32]byte, error) {
	return _Bindings.Contract.HeaderRangeFunctionIdDeprecated(&_Bindings.CallOpts)
}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_Bindings *BindingsCaller) LatestBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "latestBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_Bindings *BindingsSession) LatestBlock() (uint64, error) {
	return _Bindings.Contract.LatestBlock(&_Bindings.CallOpts)
}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_Bindings *BindingsCallerSession) LatestBlock() (uint64, error) {
	return _Bindings.Contract.LatestBlock(&_Bindings.CallOpts)
}

// NextHeaderFunctionIdDepcrecated is a free data retrieval call binding the contract method 0x8daf5691.
//
// Solidity: function nextHeaderFunctionId_depcrecated() view returns(bytes32)
func (_Bindings *BindingsCaller) NextHeaderFunctionIdDepcrecated(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "nextHeaderFunctionId_depcrecated")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NextHeaderFunctionIdDepcrecated is a free data retrieval call binding the contract method 0x8daf5691.
//
// Solidity: function nextHeaderFunctionId_depcrecated() view returns(bytes32)
func (_Bindings *BindingsSession) NextHeaderFunctionIdDepcrecated() ([32]byte, error) {
	return _Bindings.Contract.NextHeaderFunctionIdDepcrecated(&_Bindings.CallOpts)
}

// NextHeaderFunctionIdDepcrecated is a free data retrieval call binding the contract method 0x8daf5691.
//
// Solidity: function nextHeaderFunctionId_depcrecated() view returns(bytes32)
func (_Bindings *BindingsCallerSession) NextHeaderFunctionIdDepcrecated() ([32]byte, error) {
	return _Bindings.Contract.NextHeaderFunctionIdDepcrecated(&_Bindings.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Bindings *BindingsCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Bindings *BindingsSession) ProxiableUUID() ([32]byte, error) {
	return _Bindings.Contract.ProxiableUUID(&_Bindings.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Bindings *BindingsCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Bindings.Contract.ProxiableUUID(&_Bindings.CallOpts)
}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_Bindings *BindingsCaller) StateDataCommitments(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "state_dataCommitments", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_Bindings *BindingsSession) StateDataCommitments(arg0 *big.Int) ([32]byte, error) {
	return _Bindings.Contract.StateDataCommitments(&_Bindings.CallOpts, arg0)
}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_Bindings *BindingsCallerSession) StateDataCommitments(arg0 *big.Int) ([32]byte, error) {
	return _Bindings.Contract.StateDataCommitments(&_Bindings.CallOpts, arg0)
}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_Bindings *BindingsCaller) StateProofNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "state_proofNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_Bindings *BindingsSession) StateProofNonce() (*big.Int, error) {
	return _Bindings.Contract.StateProofNonce(&_Bindings.CallOpts)
}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_Bindings *BindingsCallerSession) StateProofNonce() (*big.Int, error) {
	return _Bindings.Contract.StateProofNonce(&_Bindings.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Bindings *BindingsCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Bindings *BindingsSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Bindings.Contract.SupportsInterface(&_Bindings.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Bindings *BindingsCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Bindings.Contract.SupportsInterface(&_Bindings.CallOpts, interfaceId)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Bindings *BindingsCaller) Verifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Bindings *BindingsSession) Verifier() (common.Address, error) {
	return _Bindings.Contract.Verifier(&_Bindings.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Bindings *BindingsCallerSession) Verifier() (common.Address, error) {
	return _Bindings.Contract.Verifier(&_Bindings.CallOpts)
}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_Bindings *BindingsCaller) VerifyAttestation(opts *bind.CallOpts, _proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	var out []interface{}
	err := _Bindings.contract.Call(opts, &out, "verifyAttestation", _proofNonce, _tuple, _proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_Bindings *BindingsSession) VerifyAttestation(_proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	return _Bindings.Contract.VerifyAttestation(&_Bindings.CallOpts, _proofNonce, _tuple, _proof)
}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_Bindings *BindingsCallerSession) VerifyAttestation(_proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	return _Bindings.Contract.VerifyAttestation(&_Bindings.CallOpts, _proofNonce, _tuple, _proof)
}

// CommitHeaderRange is a paid mutator transaction binding the contract method 0x8455a3cf.
//
// Solidity: function commitHeaderRange(bytes proof, bytes publicValues) returns()
func (_Bindings *BindingsTransactor) CommitHeaderRange(opts *bind.TransactOpts, proof []byte, publicValues []byte) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "commitHeaderRange", proof, publicValues)
}

// CommitHeaderRange is a paid mutator transaction binding the contract method 0x8455a3cf.
//
// Solidity: function commitHeaderRange(bytes proof, bytes publicValues) returns()
func (_Bindings *BindingsSession) CommitHeaderRange(proof []byte, publicValues []byte) (*types.Transaction, error) {
	return _Bindings.Contract.CommitHeaderRange(&_Bindings.TransactOpts, proof, publicValues)
}

// CommitHeaderRange is a paid mutator transaction binding the contract method 0x8455a3cf.
//
// Solidity: function commitHeaderRange(bytes proof, bytes publicValues) returns()
func (_Bindings *BindingsTransactorSession) CommitHeaderRange(proof []byte, publicValues []byte) (*types.Transaction, error) {
	return _Bindings.Contract.CommitHeaderRange(&_Bindings.TransactOpts, proof, publicValues)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bindings *BindingsSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.GrantRole(&_Bindings.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.GrantRole(&_Bindings.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x5f4170a4.
//
// Solidity: function initialize((address,uint64,bytes32,bytes32,address) _params) returns()
func (_Bindings *BindingsTransactor) Initialize(opts *bind.TransactOpts, _params SP1BlobstreamInitParameters) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "initialize", _params)
}

// Initialize is a paid mutator transaction binding the contract method 0x5f4170a4.
//
// Solidity: function initialize((address,uint64,bytes32,bytes32,address) _params) returns()
func (_Bindings *BindingsSession) Initialize(_params SP1BlobstreamInitParameters) (*types.Transaction, error) {
	return _Bindings.Contract.Initialize(&_Bindings.TransactOpts, _params)
}

// Initialize is a paid mutator transaction binding the contract method 0x5f4170a4.
//
// Solidity: function initialize((address,uint64,bytes32,bytes32,address) _params) returns()
func (_Bindings *BindingsTransactorSession) Initialize(_params SP1BlobstreamInitParameters) (*types.Transaction, error) {
	return _Bindings.Contract.Initialize(&_Bindings.TransactOpts, _params)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bindings *BindingsSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.RenounceRole(&_Bindings.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.RenounceRole(&_Bindings.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bindings *BindingsSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.RevokeRole(&_Bindings.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bindings *BindingsTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.RevokeRole(&_Bindings.TransactOpts, role, account)
}

// SetCheckRelayer is a paid mutator transaction binding the contract method 0x20986ce6.
//
// Solidity: function setCheckRelayer(bool _checkRelayer) returns()
func (_Bindings *BindingsTransactor) SetCheckRelayer(opts *bind.TransactOpts, _checkRelayer bool) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "setCheckRelayer", _checkRelayer)
}

// SetCheckRelayer is a paid mutator transaction binding the contract method 0x20986ce6.
//
// Solidity: function setCheckRelayer(bool _checkRelayer) returns()
func (_Bindings *BindingsSession) SetCheckRelayer(_checkRelayer bool) (*types.Transaction, error) {
	return _Bindings.Contract.SetCheckRelayer(&_Bindings.TransactOpts, _checkRelayer)
}

// SetCheckRelayer is a paid mutator transaction binding the contract method 0x20986ce6.
//
// Solidity: function setCheckRelayer(bool _checkRelayer) returns()
func (_Bindings *BindingsTransactorSession) SetCheckRelayer(_checkRelayer bool) (*types.Transaction, error) {
	return _Bindings.Contract.SetCheckRelayer(&_Bindings.TransactOpts, _checkRelayer)
}

// SetRelayerApproval is a paid mutator transaction binding the contract method 0xf62ac70f.
//
// Solidity: function setRelayerApproval(address _relayer, bool _approved) returns()
func (_Bindings *BindingsTransactor) SetRelayerApproval(opts *bind.TransactOpts, _relayer common.Address, _approved bool) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "setRelayerApproval", _relayer, _approved)
}

// SetRelayerApproval is a paid mutator transaction binding the contract method 0xf62ac70f.
//
// Solidity: function setRelayerApproval(address _relayer, bool _approved) returns()
func (_Bindings *BindingsSession) SetRelayerApproval(_relayer common.Address, _approved bool) (*types.Transaction, error) {
	return _Bindings.Contract.SetRelayerApproval(&_Bindings.TransactOpts, _relayer, _approved)
}

// SetRelayerApproval is a paid mutator transaction binding the contract method 0xf62ac70f.
//
// Solidity: function setRelayerApproval(address _relayer, bool _approved) returns()
func (_Bindings *BindingsTransactorSession) SetRelayerApproval(_relayer common.Address, _approved bool) (*types.Transaction, error) {
	return _Bindings.Contract.SetRelayerApproval(&_Bindings.TransactOpts, _relayer, _approved)
}

// UpdateFreeze is a paid mutator transaction binding the contract method 0x82e0cf6b.
//
// Solidity: function updateFreeze(bool _freeze) returns()
func (_Bindings *BindingsTransactor) UpdateFreeze(opts *bind.TransactOpts, _freeze bool) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "updateFreeze", _freeze)
}

// UpdateFreeze is a paid mutator transaction binding the contract method 0x82e0cf6b.
//
// Solidity: function updateFreeze(bool _freeze) returns()
func (_Bindings *BindingsSession) UpdateFreeze(_freeze bool) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateFreeze(&_Bindings.TransactOpts, _freeze)
}

// UpdateFreeze is a paid mutator transaction binding the contract method 0x82e0cf6b.
//
// Solidity: function updateFreeze(bool _freeze) returns()
func (_Bindings *BindingsTransactorSession) UpdateFreeze(_freeze bool) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateFreeze(&_Bindings.TransactOpts, _freeze)
}

// UpdateGenesisState is a paid mutator transaction binding the contract method 0x4c4d30fc.
//
// Solidity: function updateGenesisState(uint32 _height, bytes32 _header) returns()
func (_Bindings *BindingsTransactor) UpdateGenesisState(opts *bind.TransactOpts, _height uint32, _header [32]byte) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "updateGenesisState", _height, _header)
}

// UpdateGenesisState is a paid mutator transaction binding the contract method 0x4c4d30fc.
//
// Solidity: function updateGenesisState(uint32 _height, bytes32 _header) returns()
func (_Bindings *BindingsSession) UpdateGenesisState(_height uint32, _header [32]byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateGenesisState(&_Bindings.TransactOpts, _height, _header)
}

// UpdateGenesisState is a paid mutator transaction binding the contract method 0x4c4d30fc.
//
// Solidity: function updateGenesisState(uint32 _height, bytes32 _header) returns()
func (_Bindings *BindingsTransactorSession) UpdateGenesisState(_height uint32, _header [32]byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateGenesisState(&_Bindings.TransactOpts, _height, _header)
}

// UpdateProgramVkey is a paid mutator transaction binding the contract method 0x71cdd140.
//
// Solidity: function updateProgramVkey(bytes32 _programVkey) returns()
func (_Bindings *BindingsTransactor) UpdateProgramVkey(opts *bind.TransactOpts, _programVkey [32]byte) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "updateProgramVkey", _programVkey)
}

// UpdateProgramVkey is a paid mutator transaction binding the contract method 0x71cdd140.
//
// Solidity: function updateProgramVkey(bytes32 _programVkey) returns()
func (_Bindings *BindingsSession) UpdateProgramVkey(_programVkey [32]byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateProgramVkey(&_Bindings.TransactOpts, _programVkey)
}

// UpdateProgramVkey is a paid mutator transaction binding the contract method 0x71cdd140.
//
// Solidity: function updateProgramVkey(bytes32 _programVkey) returns()
func (_Bindings *BindingsTransactorSession) UpdateProgramVkey(_programVkey [32]byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateProgramVkey(&_Bindings.TransactOpts, _programVkey)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifier) returns()
func (_Bindings *BindingsTransactor) UpdateVerifier(opts *bind.TransactOpts, _verifier common.Address) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "updateVerifier", _verifier)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifier) returns()
func (_Bindings *BindingsSession) UpdateVerifier(_verifier common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateVerifier(&_Bindings.TransactOpts, _verifier)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifier) returns()
func (_Bindings *BindingsTransactorSession) UpdateVerifier(_verifier common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.UpdateVerifier(&_Bindings.TransactOpts, _verifier)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Bindings *BindingsTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Bindings *BindingsSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.UpgradeTo(&_Bindings.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Bindings *BindingsTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Bindings.Contract.UpgradeTo(&_Bindings.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Bindings *BindingsTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Bindings.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Bindings *BindingsSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpgradeToAndCall(&_Bindings.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Bindings *BindingsTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Bindings.Contract.UpgradeToAndCall(&_Bindings.TransactOpts, newImplementation, data)
}

// BindingsAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Bindings contract.
type BindingsAdminChangedIterator struct {
	Event *BindingsAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsAdminChanged represents a AdminChanged event raised by the Bindings contract.
type BindingsAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Bindings *BindingsFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*BindingsAdminChangedIterator, error) {

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &BindingsAdminChangedIterator{contract: _Bindings.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Bindings *BindingsFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *BindingsAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsAdminChanged)
				if err := _Bindings.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Bindings *BindingsFilterer) ParseAdminChanged(log types.Log) (*BindingsAdminChanged, error) {
	event := new(BindingsAdminChanged)
	if err := _Bindings.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Bindings contract.
type BindingsBeaconUpgradedIterator struct {
	Event *BindingsBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsBeaconUpgraded represents a BeaconUpgraded event raised by the Bindings contract.
type BindingsBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Bindings *BindingsFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*BindingsBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &BindingsBeaconUpgradedIterator{contract: _Bindings.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Bindings *BindingsFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *BindingsBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsBeaconUpgraded)
				if err := _Bindings.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Bindings *BindingsFilterer) ParseBeaconUpgraded(log types.Log) (*BindingsBeaconUpgraded, error) {
	event := new(BindingsBeaconUpgraded)
	if err := _Bindings.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsDataCommitmentStoredIterator is returned from FilterDataCommitmentStored and is used to iterate over the raw logs and unpacked data for DataCommitmentStored events raised by the Bindings contract.
type BindingsDataCommitmentStoredIterator struct {
	Event *BindingsDataCommitmentStored // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsDataCommitmentStoredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsDataCommitmentStored)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsDataCommitmentStored)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsDataCommitmentStoredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsDataCommitmentStoredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsDataCommitmentStored represents a DataCommitmentStored event raised by the Bindings contract.
type BindingsDataCommitmentStored struct {
	ProofNonce     *big.Int
	StartBlock     uint64
	EndBlock       uint64
	DataCommitment [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDataCommitmentStored is a free log retrieval operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_Bindings *BindingsFilterer) FilterDataCommitmentStored(opts *bind.FilterOpts, startBlock []uint64, endBlock []uint64, dataCommitment [][32]byte) (*BindingsDataCommitmentStoredIterator, error) {

	var startBlockRule []interface{}
	for _, startBlockItem := range startBlock {
		startBlockRule = append(startBlockRule, startBlockItem)
	}
	var endBlockRule []interface{}
	for _, endBlockItem := range endBlock {
		endBlockRule = append(endBlockRule, endBlockItem)
	}
	var dataCommitmentRule []interface{}
	for _, dataCommitmentItem := range dataCommitment {
		dataCommitmentRule = append(dataCommitmentRule, dataCommitmentItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "DataCommitmentStored", startBlockRule, endBlockRule, dataCommitmentRule)
	if err != nil {
		return nil, err
	}
	return &BindingsDataCommitmentStoredIterator{contract: _Bindings.contract, event: "DataCommitmentStored", logs: logs, sub: sub}, nil
}

// WatchDataCommitmentStored is a free log subscription operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_Bindings *BindingsFilterer) WatchDataCommitmentStored(opts *bind.WatchOpts, sink chan<- *BindingsDataCommitmentStored, startBlock []uint64, endBlock []uint64, dataCommitment [][32]byte) (event.Subscription, error) {

	var startBlockRule []interface{}
	for _, startBlockItem := range startBlock {
		startBlockRule = append(startBlockRule, startBlockItem)
	}
	var endBlockRule []interface{}
	for _, endBlockItem := range endBlock {
		endBlockRule = append(endBlockRule, endBlockItem)
	}
	var dataCommitmentRule []interface{}
	for _, dataCommitmentItem := range dataCommitment {
		dataCommitmentRule = append(dataCommitmentRule, dataCommitmentItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "DataCommitmentStored", startBlockRule, endBlockRule, dataCommitmentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsDataCommitmentStored)
				if err := _Bindings.contract.UnpackLog(event, "DataCommitmentStored", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDataCommitmentStored is a log parse operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_Bindings *BindingsFilterer) ParseDataCommitmentStored(log types.Log) (*BindingsDataCommitmentStored, error) {
	event := new(BindingsDataCommitmentStored)
	if err := _Bindings.contract.UnpackLog(event, "DataCommitmentStored", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsHeadUpdateIterator is returned from FilterHeadUpdate and is used to iterate over the raw logs and unpacked data for HeadUpdate events raised by the Bindings contract.
type BindingsHeadUpdateIterator struct {
	Event *BindingsHeadUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsHeadUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsHeadUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsHeadUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsHeadUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsHeadUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsHeadUpdate represents a HeadUpdate event raised by the Bindings contract.
type BindingsHeadUpdate struct {
	BlockNumber uint64
	HeaderHash  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterHeadUpdate is a free log retrieval operation binding the contract event 0x292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d.
//
// Solidity: event HeadUpdate(uint64 blockNumber, bytes32 headerHash)
func (_Bindings *BindingsFilterer) FilterHeadUpdate(opts *bind.FilterOpts) (*BindingsHeadUpdateIterator, error) {

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "HeadUpdate")
	if err != nil {
		return nil, err
	}
	return &BindingsHeadUpdateIterator{contract: _Bindings.contract, event: "HeadUpdate", logs: logs, sub: sub}, nil
}

// WatchHeadUpdate is a free log subscription operation binding the contract event 0x292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d.
//
// Solidity: event HeadUpdate(uint64 blockNumber, bytes32 headerHash)
func (_Bindings *BindingsFilterer) WatchHeadUpdate(opts *bind.WatchOpts, sink chan<- *BindingsHeadUpdate) (event.Subscription, error) {

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "HeadUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsHeadUpdate)
				if err := _Bindings.contract.UnpackLog(event, "HeadUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHeadUpdate is a log parse operation binding the contract event 0x292f5abc3167175400fca463fa99530cda826ec53ec5eb1f3a2776006dacd75d.
//
// Solidity: event HeadUpdate(uint64 blockNumber, bytes32 headerHash)
func (_Bindings *BindingsFilterer) ParseHeadUpdate(log types.Log) (*BindingsHeadUpdate, error) {
	event := new(BindingsHeadUpdate)
	if err := _Bindings.contract.UnpackLog(event, "HeadUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Bindings contract.
type BindingsInitializedIterator struct {
	Event *BindingsInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsInitialized represents a Initialized event raised by the Bindings contract.
type BindingsInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Bindings *BindingsFilterer) FilterInitialized(opts *bind.FilterOpts) (*BindingsInitializedIterator, error) {

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BindingsInitializedIterator{contract: _Bindings.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Bindings *BindingsFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BindingsInitialized) (event.Subscription, error) {

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsInitialized)
				if err := _Bindings.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Bindings *BindingsFilterer) ParseInitialized(log types.Log) (*BindingsInitialized, error) {
	event := new(BindingsInitialized)
	if err := _Bindings.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Bindings contract.
type BindingsRoleAdminChangedIterator struct {
	Event *BindingsRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsRoleAdminChanged represents a RoleAdminChanged event raised by the Bindings contract.
type BindingsRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Bindings *BindingsFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*BindingsRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &BindingsRoleAdminChangedIterator{contract: _Bindings.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Bindings *BindingsFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *BindingsRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsRoleAdminChanged)
				if err := _Bindings.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Bindings *BindingsFilterer) ParseRoleAdminChanged(log types.Log) (*BindingsRoleAdminChanged, error) {
	event := new(BindingsRoleAdminChanged)
	if err := _Bindings.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Bindings contract.
type BindingsRoleGrantedIterator struct {
	Event *BindingsRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsRoleGranted represents a RoleGranted event raised by the Bindings contract.
type BindingsRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BindingsRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BindingsRoleGrantedIterator{contract: _Bindings.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BindingsRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsRoleGranted)
				if err := _Bindings.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) ParseRoleGranted(log types.Log) (*BindingsRoleGranted, error) {
	event := new(BindingsRoleGranted)
	if err := _Bindings.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Bindings contract.
type BindingsRoleRevokedIterator struct {
	Event *BindingsRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsRoleRevoked represents a RoleRevoked event raised by the Bindings contract.
type BindingsRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BindingsRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BindingsRoleRevokedIterator{contract: _Bindings.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BindingsRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsRoleRevoked)
				if err := _Bindings.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bindings *BindingsFilterer) ParseRoleRevoked(log types.Log) (*BindingsRoleRevoked, error) {
	event := new(BindingsRoleRevoked)
	if err := _Bindings.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Bindings contract.
type BindingsUpgradedIterator struct {
	Event *BindingsUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsUpgraded represents a Upgraded event raised by the Bindings contract.
type BindingsUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Bindings *BindingsFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BindingsUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BindingsUpgradedIterator{contract: _Bindings.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Bindings *BindingsFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BindingsUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsUpgraded)
				if err := _Bindings.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Bindings *BindingsFilterer) ParseUpgraded(log types.Log) (*BindingsUpgraded, error) {
	event := new(BindingsUpgraded)
	if err := _Bindings.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BindingsValidatorBitmapEquivocationIterator is returned from FilterValidatorBitmapEquivocation and is used to iterate over the raw logs and unpacked data for ValidatorBitmapEquivocation events raised by the Bindings contract.
type BindingsValidatorBitmapEquivocationIterator struct {
	Event *BindingsValidatorBitmapEquivocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BindingsValidatorBitmapEquivocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BindingsValidatorBitmapEquivocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BindingsValidatorBitmapEquivocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BindingsValidatorBitmapEquivocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BindingsValidatorBitmapEquivocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BindingsValidatorBitmapEquivocation represents a ValidatorBitmapEquivocation event raised by the Bindings contract.
type BindingsValidatorBitmapEquivocation struct {
	TrustedBlock    uint64
	TargetBlock     uint64
	ValidatorBitmap *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterValidatorBitmapEquivocation is a free log retrieval operation binding the contract event 0x034c7608fd99db72330fdb1bcf6386af42ee9b6125664743942b942a8df4a351.
//
// Solidity: event ValidatorBitmapEquivocation(uint64 trustedBlock, uint64 targetBlock, uint256 validatorBitmap)
func (_Bindings *BindingsFilterer) FilterValidatorBitmapEquivocation(opts *bind.FilterOpts) (*BindingsValidatorBitmapEquivocationIterator, error) {

	logs, sub, err := _Bindings.contract.FilterLogs(opts, "ValidatorBitmapEquivocation")
	if err != nil {
		return nil, err
	}
	return &BindingsValidatorBitmapEquivocationIterator{contract: _Bindings.contract, event: "ValidatorBitmapEquivocation", logs: logs, sub: sub}, nil
}

// WatchValidatorBitmapEquivocation is a free log subscription operation binding the contract event 0x034c7608fd99db72330fdb1bcf6386af42ee9b6125664743942b942a8df4a351.
//
// Solidity: event ValidatorBitmapEquivocation(uint64 trustedBlock, uint64 targetBlock, uint256 validatorBitmap)
func (_Bindings *BindingsFilterer) WatchValidatorBitmapEquivocation(opts *bind.WatchOpts, sink chan<- *BindingsValidatorBitmapEquivocation) (event.Subscription, error) {

	logs, sub, err := _Bindings.contract.WatchLogs(opts, "ValidatorBitmapEquivocation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BindingsValidatorBitmapEquivocation)
				if err := _Bindings.contract.UnpackLog(event, "ValidatorBitmapEquivocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorBitmapEquivocation is a log parse operation binding the contract event 0x034c7608fd99db72330fdb1bcf6386af42ee9b6125664743942b942a8df4a351.
//
// Solidity: event ValidatorBitmapEquivocation(uint64 trustedBlock, uint64 targetBlock, uint256 validatorBitmap)
func (_Bindings *BindingsFilterer) ParseValidatorBitmapEquivocation(log types.Log) (*BindingsValidatorBitmapEquivocation, error) {
	event := new(BindingsValidatorBitmapEquivocation)
	if err := _Bindings.contract.UnpackLog(event, "ValidatorBitmapEquivocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
